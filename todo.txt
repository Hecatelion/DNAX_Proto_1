last step :
 
 - corresponding prefabs : 
	+ test Animations (play & cancel)
		+ classical unity animator stuff
		+ installing visual effect graph 
		+ upgrading unity (so FX graph is supported on URP)
		+ fx 

next tasks: 

 - put visual effects on organism (appart from code logic) (cf tempOrganismBuilder)
// = put their fxs and feedbacks on skills, stop calling Heal FX on PlayerCascadingAnimator
// eg. a fireball anim and fxs should be called and managed by the fireball skill object, not a player.animator.PlayAnim(FireBall)
	-> Passive.onActivation()
	-> Ability.onActivation()
	-> Organism.onDeath()
 - shade the organism model according to dna (size, colors, etc.)
 - model anchor system ? (to place automatically sub-models on their parent 
	depending on which spots are free, to avoid sub-model overlapping)
 - Camera management 
	- tracking : character or asteroid on death (use a default transform position while asteroid not coded)
	- zoom according to organism scale ? (organism getting bigger or world getting smaller ?)
- asteroid 
	- managing organism creation raw
	- w/ UI
	- build saving ?
	- DNA storage ? 

- organism instrude, DNA gathering (modify current DNA then bring it back to astroid)

 (?) should manage animations types w/ scriptable objects ? 
 (!) make an fx manager (or FXator, a script attached to a GO (eg. organismGO)) 
	and bind fx to GO.callbacks and take fxs out of Cascading Animator
     	(example a bullet shooting doesnt have any anim but launch fx, + fx isnt an anim) 
